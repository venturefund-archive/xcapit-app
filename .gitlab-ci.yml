---
stages:
  - syntax
  - test
  - build
  - release
  - docker-build

image: docker:19.03.1
services:
  - docker:19.03.1-dind
    
variables:
  API_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  CI_RUNNER_REPO: registry.gitlab.com/xcapit/infra/ci-runner
  CI_RUNNER_TAG: v1.0.0
  HADOLINT_REPO: hadolint/hadolint
  HADOLINT_TAG: v2.0.0-alpine
  SRC_DIR: "."  # Indicar aqui donde esta el src code, puede ser indicado en las vars de gitlab
  NODE_VERSION: 14-alpine
  
###########################################################################
###########################################################################
### Templates

### Syntax check
.syntax-check: &syntax-check
  stage: syntax
  tags:
    - coreinfra
  image: node:${NODE_VERSION}
  cache:
    untracked: true
    key: ${CI_COMMIT_REF_SLUG}
  before_script:
    - cd ${SRC_DIR}
  script:
    - nodejs --check *.js
  allow_failure: true

### NodeJS test
.nodejs-test: &nodejs-test
  stage: test
  image: node:${NODE_VERSION}
  cache:
    untracked: true
    key: ${CI_COMMIT_REF_SLUG}
  tags:
    - coreinfra    
  before_script:
    - cd ${SRC_DIR}
  script:
    - npm test

### Docker lint
.docker-lint: &docker-lint
  stage: syntax
  image: "${HADOLINT_REPO}:${HADOLINT_TAG}"
  before_script:
    - hadolint --version
    - cd ${SRC_DIR}
  tags:
    - coreinfra
  script:
    - hadolint --ignore DL3018 --ignore DL3006 --ignore DL3003 --ignore DL3013 --ignore DL3007 --ignore DL3002 --ignore DL3008 --ignore DL3042 Dockerfile

### Semantic release
.semantic-release: &semantic-release
  stage: release
  image: "${CI_RUNNER_REPO}:${CI_RUNNER_TAG}"
  tags:
    - coreinfra

###########################################################################
###########################################################################
### Stages

# # Test
Docker Lint:
  <<: *docker-lint
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

### Syntax check
Syntax checking:
  <<: *syntax-check
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

### pytest
NodeJS Test:
  <<: *nodejs-test
  needs:
    - job: Syntax checking
      artifacts: false
    - job: Docker Lint
      artifacts: false
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

### Build
Build docker image:
  stage: docker-build
  tags:
    - coreinfra
  before_script:
    - cd ${SRC_DIR}
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
    - tags

# # Release
Release Master:
  <<: *semantic-release
  only:
    refs:
    - master
  script:
    - npx semantic-release -p "@semantic-release/commit-analyzer" "@semantic-release/changelog" "@semantic-release/git" 

Release Develop:
  <<: *semantic-release
  only:
    refs:
    - develop
  script:
    - npx semantic-release --tag-format ${CI_COMMIT_BRANCH}-\${version} -p "@semantic-release/commit-analyzer" "@semantic-release/changelog" "@semantic-release/git" 

### Smoke test sobre la imagen recien creada
Smoke test:
  <<: *django-smoke-test
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^\[build\]/
    - when: never
